// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const blockAllUserSession = `-- name: BlockAllUserSession :exec
UPDATE sessions SET blocked_at = now(), invalidated_at = now() WHERE user_id = $1
`

func (q *Queries) BlockAllUserSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, blockAllUserSession, userID)
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, refresh_token, refresh_token_exp,
user_agent, updated_at, ip_address, blocked_at, invalidated_at, last_active_at, fcm_token)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, user_id, refresh_token, refresh_token_exp, created_at, updated_at, invalidated_at, last_active_at, blocked_at, user_agent, ip_address, fcm_token
`

type CreateSessionParams struct {
	ID              uuid.UUID      `json:"id"`
	UserID          uuid.UUID      `json:"user_id"`
	RefreshToken    string         `json:"refresh_token"`
	RefreshTokenExp time.Time      `json:"refresh_token_exp"`
	UserAgent       string         `json:"user_agent"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	IpAddress       pqtype.Inet    `json:"ip_address"`
	BlockedAt       sql.NullTime   `json:"blocked_at"`
	InvalidatedAt   sql.NullTime   `json:"invalidated_at"`
	LastActiveAt    sql.NullTime   `json:"last_active_at"`
	FcmToken        sql.NullString `json:"fcm_token"`
}

// Create a new session
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.RefreshTokenExp,
		arg.UserAgent,
		arg.UpdatedAt,
		arg.IpAddress,
		arg.BlockedAt,
		arg.InvalidatedAt,
		arg.LastActiveAt,
		arg.FcmToken,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExp,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvalidatedAt,
		&i.LastActiveAt,
		&i.BlockedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.FcmToken,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSessionAndUserByRefreshToken = `-- name: GetSessionAndUserByRefreshToken :one
SELECT s.id, s.user_id, s.refresh_token, s.refresh_token_exp, s.created_at, s.updated_at, s.invalidated_at, s.last_active_at, s.blocked_at, s.user_agent, s.ip_address, s.fcm_token, u.username, u.email, u.phone, u.is_email_verified, ur.role_id
FROM sessions s
JOIN authentications u ON s.user_id = u.id
LEFT JOIN user_roles ur ON u.id = ur.user_id
WHERE s.refresh_token = $1
`

type GetSessionAndUserByRefreshTokenRow struct {
	ID              uuid.UUID      `json:"id"`
	UserID          uuid.UUID      `json:"user_id"`
	RefreshToken    string         `json:"refresh_token"`
	RefreshTokenExp time.Time      `json:"refresh_token_exp"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	InvalidatedAt   sql.NullTime   `json:"invalidated_at"`
	LastActiveAt    sql.NullTime   `json:"last_active_at"`
	BlockedAt       sql.NullTime   `json:"blocked_at"`
	UserAgent       string         `json:"user_agent"`
	IpAddress       pqtype.Inet    `json:"ip_address"`
	FcmToken        sql.NullString `json:"fcm_token"`
	Username        sql.NullString `json:"username"`
	Email           string         `json:"email"`
	Phone           sql.NullString `json:"phone"`
	IsEmailVerified sql.NullBool   `json:"is_email_verified"`
	RoleID          sql.NullInt32  `json:"role_id"`
}

func (q *Queries) GetSessionAndUserByRefreshToken(ctx context.Context, refreshToken string) (GetSessionAndUserByRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionAndUserByRefreshToken, refreshToken)
	var i GetSessionAndUserByRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExp,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvalidatedAt,
		&i.LastActiveAt,
		&i.BlockedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.FcmToken,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.IsEmailVerified,
		&i.RoleID,
	)
	return i, err
}

const getSessionsByID = `-- name: GetSessionsByID :one
SELECT id, user_id, refresh_token, refresh_token_exp, created_at, updated_at, invalidated_at, last_active_at, blocked_at, user_agent, ip_address, fcm_token FROM sessions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionsByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionsByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExp,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvalidatedAt,
		&i.LastActiveAt,
		&i.BlockedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.FcmToken,
	)
	return i, err
}

const getSessionsByRefreshToken = `-- name: GetSessionsByRefreshToken :one
SELECT id, user_id, refresh_token, refresh_token_exp, created_at, updated_at, invalidated_at, last_active_at, blocked_at, user_agent, ip_address, fcm_token FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) GetSessionsByRefreshToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionsByRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.RefreshTokenExp,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvalidatedAt,
		&i.LastActiveAt,
		&i.BlockedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.FcmToken,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, user_id, refresh_token, refresh_token_exp, created_at, updated_at, invalidated_at, last_active_at, blocked_at, user_agent, ip_address, fcm_token FROM sessions
WHERE user_id = $1
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.RefreshTokenExp,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InvalidatedAt,
			&i.LastActiveAt,
			&i.BlockedAt,
			&i.UserAgent,
			&i.IpAddress,
			&i.FcmToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeSessionById = `-- name: RevokeSessionById :exec
UPDATE "sessions" SET invalidated_at = now() WHERE id = $1
`

func (q *Queries) RevokeSessionById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeSessionById, id)
	return err
}

const rotateSessionTokens = `-- name: RotateSessionTokens :exec
UPDATE "sessions"
SET
  "refresh_token" = $2,
  "refresh_token_exp" = $3,
  "updated_at" = now(),
  "last_active_at" = now()
WHERE "id" = $1
`

type RotateSessionTokensParams struct {
	ID              uuid.UUID `json:"id"`
	RefreshToken    string    `json:"refresh_token"`
	RefreshTokenExp time.Time `json:"refresh_token_exp"`
}

func (q *Queries) RotateSessionTokens(ctx context.Context, arg RotateSessionTokensParams) error {
	_, err := q.db.ExecContext(ctx, rotateSessionTokens, arg.ID, arg.RefreshToken, arg.RefreshTokenExp)
	return err
}
