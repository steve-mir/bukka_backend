name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: bukka-788a7
  GAR_NAME: bukka-backend 
  GAR_LOCATION: us-central1
  SERVICE: bukka-backend-app
  REGION: us-central1

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        run: |-
          gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          port: 7001
          allow-unauthenticated: true
          use-http2: true
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |-
            DB_SOURCE=${{ secrets.LIVE_DB_SOURCE }}
            DB_DRIVER=${{ secrets.DB_DRIVER }}
            MIGRATION_URL=${{ secrets.MIGRATION_URL }}
            REDIS_ADDRESS=${{ secrets.LIVE_REDIS_ADDRESS }}
            REDIS_USERNAME=${{ secrets.LIVE_REDIS_USERNAME }}
            REDIS_PWD=${{ secrets.LIVE_REDIS_PWD }}
            APP_URL=${{ secrets.APP_URL }}
            APP_NAME=${{ secrets.APP_NAME }}
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            HTTP_AUTH_SERVER_ADDRESS=${{ secrets.HTTP_AUTH_SERVER_ADDRESS }}
            ACCESS_TOKEN_SYMMETRIC_KEY=${{ secrets.ACCESS_TOKEN_SYMMETRIC_KEY }}
            REFRESH_TOKEN_SYMMETRIC_KEY=${{ secrets.REFRESH_TOKEN_SYMMETRIC_KEY }}
            ACCESS_TOKEN_DURATION=${{ secrets.ACCESS_TOKEN_DURATION }}
            REFRESH_TOKEN_DURATION=${{ secrets.REFRESH_TOKEN_DURATION }}
            DB_MAX_IDLE_CONN=${{ secrets.DB_MAX_IDLE_CONN }}
            DB_MAX_OPEN_CONN=${{ secrets.DB_MAX_OPEN_CONN }}
            DB_MAX_IDLE_TIME=${{ secrets.DB_MAX_IDLE_TIME }}
            DB_MAX_LIFE_TIME=${{ secrets.DB_MAX_LIFE_TIME }}
            GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
            GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
            GOOGLE_REDIRECT=${{ secrets.GOOGLE_REDIRECT }}
            SMTP_NAME=${{ secrets.SMTP_NAME }}
            SMTP_ADDR=${{ secrets.SMTP_ADDR }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}


      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
