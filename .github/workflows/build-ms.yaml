name: Docker build for ms images

on:
  schedule:
    - cron: '22 19 * * *'
  push:
    branches: [ "dev" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Define an array of services to build and push
      - name: Set up services array
        id: vars
        run: echo "SERVICES=authentication-service menu-service listener-service" >> $GITHUB_ENV

      - name: Build and push Docker images for each service
        id: build-and-push
        run: |
          for service in ${{ env.SERVICES }}; do
            echo "Building and pushing Docker image for $service"
            docker buildx build --push \
              --context ./1/$service \
              --file ./1/$service/$service.dockerfile \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:latest \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:${{ steps.meta.outputs.version }}
          done

      - name: Sign the published Docker images
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          for service in ${{ env.SERVICES }}; do
            cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:latest
            cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:${{ steps.meta.outputs.version }}
          done
